/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ACER
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ph.orders.database.ConnectionPool;
import ph.orders.model.OrdersModel;

public class ORDER_DATA_FORM extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    String query = null;

    /**
     * Creates new form ORDER_DATA_FORM
     */
    public ORDER_DATA_FORM() throws ClassNotFoundException, SQLException {
        initComponents();
        showOrderNumbersOnComboBox('c');
        showOrdersOnTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtItems = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtNoOrder = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnAddNew = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtOrNo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Order-Data");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jLabel2.setText("Price:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        jLabel3.setText("No Order:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, -1, -1));

        jLabel4.setText("Items:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        jLabel5.setText("Date:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, -1, -1));

        jLabel6.setText("OR No:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        txtItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemsActionPerformed(evt);
            }
        });
        getContentPane().add(txtItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 290, -1));
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 290, -1));
        getContentPane().add(txtNoOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 290, -1));

        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });
        getContentPane().add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 290, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 110, -1));

        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 110, -1));

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 110, -1));

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Or No.", "Items", "Price", "No Order", "Date"
            }
        ));
        tblRecords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRecordsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRecords);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 490, 180));

        jPanel1.setForeground(new java.awt.Color(255, 51, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 60));

        getContentPane().add(txtOrNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 290, -1));

        jButton1.setText("Search");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, 110, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemsActionPerformed

    public void showOrdersOnTable() throws SQLException, ClassNotFoundException {
        ArrayList<OrdersModel> ordersList = new ArrayList<>();
        String query = "select * from orderTable";
        conn = ConnectionPool.getConnection();
        ps = conn.prepareStatement(query);
        rs = ps.executeQuery();
        while (rs.next()) {
            OrdersModel orders = new OrdersModel();
            orders.setOrNo(rs.getInt("orNo"));
            orders.setItems(rs.getString("items"));
            orders.setPrice(rs.getDouble("price"));
            orders.setNoOrder(rs.getInt("noOrder"));
            String dataToBeFormatted = rs.getString("date");
            LocalDate date = LocalDate.parse(dataToBeFormatted);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
            String formattedDate = date.format(formatter);
            orders.setDate(formattedDate);
            ordersList.add(orders);
        }
        conn.close();

        DefaultTableModel dt = (DefaultTableModel) tblRecords.getModel();

        for (OrdersModel orders : ordersList) {
            Object[] row = {
                orders.getOrNo(),
                orders.getItems(),
                orders.getPrice(),
                orders.getNoOrder(),
                orders.getDate()
            };
            dt.addRow(row);
        }
    }

    public void showOrderNumbersOnComboBox(char action) throws ClassNotFoundException {
        switch (action) {
            case 'c':
                query = "SELECT orNo FROM orderTable";
                try {
                    conn = ConnectionPool.getConnection();
                    ps = conn.prepareStatement(query);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        int orNo = rs.getInt("orNo");
                        txtOrNo.addItem(orNo);
                    }
                } catch (SQLException e) {
                    System.out.println("Order Number Error: " + e);
                } finally {
                    if (conn != null) {
                        try {
                            conn.close();
                        } catch (SQLException e) {
                            //ignore
                        }
                    }
                    if (ps != null) {
                        try {
                            ps.close();
                        } catch (SQLException e) {
                            //ignore
                        }
                    }

                }
                break;
            case 'a':
                query = "SELECT orNo FROM orderTable ORDER BY orNo DESC LIMIT 1;";
                try {
                    conn = ConnectionPool.getConnection();
                    ps = conn.prepareStatement(query);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        int orNo = rs.getInt("orNo");
                        txtOrNo.addItem(orNo);
                    }
                } catch (SQLException e) {
                    System.out.println("Order Number Error: " + e);
                } finally {
                    if (conn != null) {
                        try {
                            conn.close();
                        } catch (SQLException e) {
                            //ignore
                        }
                    }
                    if (ps != null) {
                        try {
                            ps.close();
                        } catch (SQLException e) {
                            //ignore
                        }
                    }

                }
                break;
        }

    }

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed

        String items = txtItems.getText();
        double price = Double.parseDouble(txtPrice.getText());
        int noOrder = Integer.parseInt(txtNoOrder.getText());
        String date = txtDate.getText();

        OrdersModel ordersModel = new OrdersModel(items, price, noOrder, date);

        try {
            addNewOrders(ordersModel);
            showOrderNumbersOnComboBox('a');
            showOrderOnTable(ordersModel);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtItems.setText("");
        txtPrice.setText("");
        txtNoOrder.setText("");
        txtDate.setText("");

        JOptionPane.showMessageDialog(null, "1 Record Added");

    }//GEN-LAST:event_btnAddNewActionPerformed

    public int getLastOrNo() throws SQLException, ClassNotFoundException {
        int orNo = 0;
        query = "SELECT orNo FROM orderTable ORDER BY orNo DESC LIMIT 1;";
        conn = ConnectionPool.getConnection();
        ps = conn.prepareStatement(query);
        rs = ps.executeQuery();
        while (rs.next()) {
            orNo = rs.getInt("orNo");
        }
        return orNo;
    }

    public void showOrderOnTable(OrdersModel order) throws SQLException, ClassNotFoundException {
        DefaultTableModel dt = (DefaultTableModel) tblRecords.getModel();
order.setOrNo(getLastOrNo());
        Object[] row = {
            order.getOrNo(),
            order.getItems(),
            order.getPrice(),
            order.getNoOrder(),
            order.getDate()
        };
        dt.addRow(row);
    }

    public void addNewOrders(OrdersModel orders) throws ClassNotFoundException, SQLException {
        query = "insert into ordertable ("
                + "items,"
                + "price, "
                + "noOrder, "
                + "date) "
                + "values (?,?,?,STR_TO_DATE(?, '%m-%d-%Y'))";
        try {
            conn = ConnectionPool.getConnection();
            ps = conn.prepareStatement(query);
            System.out.println(orders.getItems());
            System.out.println(Double.toString(orders.getPrice()));
            System.out.println(orders.getNoOrder());
            System.out.println(orders.getDate());
            ps.setString(1, orders.getItems());
            ps.setDouble(2, orders.getPrice());
            ps.setInt(3, orders.getNoOrder());
            ps.setString(4, orders.getDate());
            ps.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Orders Error: " + e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    //ignore
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException e) {
                    //ignore
                }
            }

        }
    }

    private void tblRecordsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRecordsMouseClicked
        DefaultTableModel dt = (DefaultTableModel) tblRecords.getModel();
        int index = tblRecords.getSelectedRow();

        txtOrNo.setSelectedItem(dt.getValueAt(index, 0));
        txtItems.setText(dt.getValueAt(index, 1).toString());
        txtPrice.setText(dt.getValueAt(index, 2).toString());
        txtNoOrder.setText(dt.getValueAt(index, 3).toString());
        txtDate.setText(dt.getValueAt(index, 4).toString());
    }//GEN-LAST:event_tblRecordsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int orNo = (int) txtOrNo.getSelectedItem();
        String items = txtItems.getText();
        double price = Double.parseDouble(txtPrice.getText());
        int noOrder = Integer.parseInt(txtNoOrder.getText());
        String date = txtDate.getText();
        
        OrdersModel orders = new OrdersModel(orNo, items, price, noOrder, date);
        
        try {
            updateFunctionForDatabase(orders);
        } catch (SQLException ex) {
            Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel dt = (DefaultTableModel) tblRecords.getModel();
        int index = tblRecords.getSelectedRow();
        dt.setValueAt(orNo, index, 0);
        dt.setValueAt(items, index, 1);
        dt.setValueAt(price, index, 2);
        dt.setValueAt(noOrder, index, 3);
        dt.setValueAt(date, index, 4);

        JOptionPane.showMessageDialog(null, "1 Record Updated");

    }//GEN-LAST:event_btnUpdateActionPerformed

    public void updateFunctionForDatabase(OrdersModel orders) throws SQLException, ClassNotFoundException {
            String query = "update orderTable set "
                + "items = ?, "
                + "price = ?, "
                + "noOrder = ?, "
                + "date = ? "
                + "where orNo = ? ";
        conn = ConnectionPool.getConnection();
            ps = conn.prepareStatement(query);
            ps.setInt(5, orders.getOrNo());
            ps.setString(1, orders.getItems());
            ps.setDouble(2, orders.getPrice());
            ps.setInt(3, orders.getNoOrder());
            ps.setString(4, orders.getDate());
            ps.executeUpdate();
    }
    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        DefaultTableModel dt = (DefaultTableModel) tblRecords.getModel();
        int index = tblRecords.getSelectedRow();
        dt.removeRow(index);
        txtOrNo.setSelectedItem("");
        txtItems.setText("");
        txtPrice.setText("");
        txtNoOrder.setText("");
        txtDate.setText("");

        JOptionPane.showMessageDialog(null, "1 Record Delete");

    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ORDER_DATA_FORM().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ORDER_DATA_FORM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblRecords;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtItems;
    private javax.swing.JTextField txtNoOrder;
    private javax.swing.JComboBox<Integer> txtOrNo;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
